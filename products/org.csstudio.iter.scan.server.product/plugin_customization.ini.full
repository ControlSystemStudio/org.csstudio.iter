#/
## Generated date: Tue Jan 19 09:05:57 UTC 2016
#/

#/
## Organization (ITER) specific plugin preferences
#/

#/
## org.csstudio.auth 
#/
#/ Specify where the secure storage should locate.
#/ It can be either "INSTALL_LOCATION" or "CONFIGURATION_LOCATION".
#/ By default it is "CONFIGURATION_LOCATION".
# org.csstudio.auth/secure_storage_location=CONFIGURATION_LOCATION

#<< org.csstudio.auth/secure_storage_location=CONFIGURATION_LOCATION

#/
## org.csstudio.autocomplete 
#/
#/ # Default preferences for this plugin
#/ 
#/ Default max result per provider
# org.csstudio.autocomplete/default_max_results=10
#/ 
#/ Define ordered provider list by type and maximum number of expected results by provider
#/ providers.TYPE=provider_name[,max_results];provider_name[,max_results]...
#/ providers.ANOTHER_TYPE=provider_name[,max_results];provider_name[,max_results]...
#/ Example:
#/ providers.PV= History; SDD Database, 5; DB Files, 5
# org.csstudio.autocomplete/providers.PV=History,10
# org.csstudio.autocomplete/providers.Formula=History,10
#/ 
#/ Top results separators
# org.csstudio.autocomplete/max_top_results=3
# org.csstudio.autocomplete/separators=-.(

#<< org.csstudio.autocomplete/default_max_results=10
#<< org.csstudio.autocomplete/max_top_results=3
#<< org.csstudio.autocomplete/providers.Formula=History,10
#<< org.csstudio.autocomplete/providers.PV=History,10
#<< org.csstudio.autocomplete/separators=-.(

#/
## org.csstudio.logging 
#/
#/ Logging preferences
#/ 
#/ Detail of message format: LOW, HIGH
# org.csstudio.logging/detail=HIGH
#/ 
#/ Log level for console:
#/ OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL
#/ Technically also allows integer level as defined by java.util.logging.Level,
#/ but suggestion is to use predefined level names
# org.csstudio.logging/console_level=CONFIG
#/ 
#/ Log level for file:
#/ OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL
#/ Note that level for file cannot be higher than level for console
# org.csstudio.logging/file_level=INFO
#/ 
#/ Path and pattern for log files
#/ Leave empty to disable file logging
# org.csstudio.logging/file_pattern=
#/ 
#/ Maximum number of bytes kept in file
# org.csstudio.logging/file_bytes=8000
#/ 
#/ Maximum number of file kept in rotation
# org.csstudio.logging/file_count=2
#/ 
#/ Log level for JMS:
#/ OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL
#/ Note that level for JMS cannot be higher than level for console
# org.csstudio.logging/jms_level=INFO
#/ 
#/ URL of JMS used for logging: failover:(tcp://some_host.my.site.org:61616)
#/ Leave empty to disable JMS logging
# org.csstudio.logging/jms_url=
#/ 
#/ Topic to use for log messages
# org.csstudio.logging/jms_topic=LOG

#<< org.csstudio.logging/console_level=CONFIG
#<< org.csstudio.logging/detail=HIGH
#<< org.csstudio.logging/file_bytes=8000
org.csstudio.logging/file_bytes=500000
#<< org.csstudio.logging/file_count=2
#<< org.csstudio.logging/file_level=INFO
org.csstudio.logging/file_level=CONFIG
#<< org.csstudio.logging/file_pattern=
#<< org.csstudio.logging/jms_level=INFO
org.csstudio.logging/jms_level=SEVERE
#<< org.csstudio.logging/jms_topic=LOG
#<< org.csstudio.logging/jms_url=

#/
## org.csstudio.scan 
#/
#/ Preference settings for the scan system
#/ 
#/ This combines settings for various pieces of the scan system,
#/ including for example settings specific to the scan server
#/ or the scan client that are not useful to the respective 'other'
#/ 
#/ Path to the scan configuration.
#/ See org.csstudio.scan/examples/scan_config.xml for example,
#/ and org.csstudio.scan/examples/scan_config.xsd for schema.
#/ 
#/ May be empty.
#/ 
#/ Paths starting with "/" must refer to absolute locations
#/ in the local file system.
#/ 
#/ Paths starting with "platform:/plugin/org...." must refer
#/ to a location within a plugin.
# org.csstudio.scan/scan_config=platform:/plugin/org.csstudio.scan/examples/scan_config.xml
#/ 
#/ For backwards compatibility, if defined, the legacy beamline_config simulation_config
#/ will be used.
#/ 
#/ PV alias names:
#/ beamline_config=platform:/plugin/org.csstudio.scan/examples/beamline.xml
#/ 
#/ Simulation settings:
#/ simulation_config=platform:/plugin/org.csstudio.scan/examples/simulation.xml
#/ 
#/ They are now deprecated, and their content has been combined into one scan_config.
#/ 
#/ Name of host where scan server is running
# org.csstudio.scan/server_host=localhost
#/ 
#/ TCP port of scan server REST interface
# org.csstudio.scan/server_port=4810
#/ 
#/ Poll period [millisecs] of the scan client (scan monitor, plot, ...)
# org.csstudio.scan/scan_client_poll_period=1000
#/ 
#/ 
#/ ---- Only used by Scan Server
#/ 
#/ Scan commands executed before and after the 'main' scan
#/ 
#/ Paths starting with "platform:/plugin/org...." must refer
#/ to a location within a plugin
#/ 
#/ May list several comma-separated pre and post scans
# org.csstudio.scan/pre_scan=platform:/plugin/org.csstudio.scan/examples/pre_scan.scn
# org.csstudio.scan/post_scan=platform:/plugin/org.csstudio.scan/examples/post_scan.scn
#/ 
#/ Search paths for scan scripts and 'included' scans.
#/ May contain several comma-separated paths.
#/ "platform:/plugin/name.of.plugin/path_in_plugin" may be used
#/ as long as the plugin is expanded.
#/ Jython will not work with jar-ed up plugins, only
#/ paths into expanded scan server plugins.
# org.csstudio.scan/script_paths=platform:/plugin/org.csstudio.numjy/jython,platform:/plugin/org.csstudio.scan/examples
#/ 
#/ If memory consumption of scan server is above this percentage,
#/ older scans are removed whenever a new scan is added
# org.csstudio.scan/old_scan_removal_memory_threshold=50
#/ 
#/ If memory consumption of scan server is above this percentage,
#/ data logger will not add more samples to the in-memory logger
# org.csstudio.scan/data_logger_memory_threshold=80
#/ 
#/ Prefix to scan server status PVs
#/ When empty, no status PVs will be updated
# org.csstudio.scan/status_pv_prefix=Demo:Scan:
#/ 
#/ Scan server device name macros
#/ "macro=value, macro=value"
# org.csstudio.scan/macros=DemoDevice=motor_x
#/ 
#/ Log command timeout [seconds]
#/ Log commands actively read the current value of each device to log,
#/ not relying on the last received monitor to be up-do-date-enough.
#/ This timeout is used when performing those reads.
#/ The value applies to each device, i.e. a Log command for logging the values
#/ of 5 devices could overall consume 5 times the timeout.
# org.csstudio.scan/log_command_read_timeout=20
#/ 
#/ Value check timeout [seconds]
#/ Set and Loop commands have a timeout that is used
#/ to wait for completion or
#/ to wait for the readback to match.
#/ When using completion _and_ checking a readback,
#/ the readback check does not use the full timeout but instead
#/ checks if the value matches "right away" after completion has been confirmed.
#/ This check, however, needs to read the current value of the PV,
#/ so it also needs some timeout
# org.csstudio.scan/value_check_timeout=20

#<< org.csstudio.scan/data_logger_memory_threshold=80
#<< org.csstudio.scan/log_command_read_timeout=20
#<< org.csstudio.scan/macros=DemoDevice=motor_x
org.csstudio.scan/macros=
#<< org.csstudio.scan/old_scan_removal_memory_threshold=50
#<< org.csstudio.scan/post_scan=platform:/plugin/org.csstudio.scan/examples/post_scan.scn
org.csstudio.scan/post_scan=
#<< org.csstudio.scan/pre_scan=platform:/plugin/org.csstudio.scan/examples/pre_scan.scn
org.csstudio.scan/pre_scan=
#<< org.csstudio.scan/scan_client_poll_period=1000
#<< org.csstudio.scan/scan_config=platform:/plugin/org.csstudio.scan/examples/scan_config.xml
#<< org.csstudio.scan/script_paths=platform:/plugin/org.csstudio.numjy/jython,platform:/plugin/org.csstudio.scan/examples
org.csstudio.scan/script_paths=
#<< org.csstudio.scan/server_host=localhost
#<< org.csstudio.scan/server_port=4810
#<< org.csstudio.scan/status_pv_prefix=Demo:Scan:
org.csstudio.scan/status_pv_prefix=
#<< org.csstudio.scan/value_check_timeout=20
#>>
org.csstudio.scan/beamline_config=platform:/plugin/org.csstudio.iter.scan.server.product/config/scan_config.xml

#/
## org.csstudio.scan.log.derby 
#/
#/ Derby log settings
#/ 
#/ Directory where Derby files are kept: Database, derby.log, ...
# org.csstudio.scan.log.derby/database_directory=/tmp/scan_log_db
#/ 
#/ TCP port for Derby network server
#/ Set to <0 to disable the network server
# org.csstudio.scan.log.derby/server_port=1527

#<< org.csstudio.scan.log.derby/database_directory=/tmp/scan_log_db
org.csstudio.scan.log.derby/database_directory=/tmp/css-scan-server_log_db
#<< org.csstudio.scan.log.derby/server_port=1527

#/
## org.csstudio.security 
#/
#/ Security Settings
#/ 
#/ #
#/ # Authentication
#/ #
#/ 
#/ Option 1:
#/ Use a JAAS config file as in normal use of JAAS
#/ 
#/ Path to JAAS configuration file
#/ 
#/ When located inside a plugin, use
#/ "platform:/plugin/name.of.plugin/path/within/plugin.conf"
#/ 
#/ When a file "my_jaas_settings.conf" is placed
#/ inside the product's "configuration/" directory, use
#/ "platform:/config/my_jaas_settings.conf"
#/ 
#/ For plain files, use either
#/ "file:/full/path/to/my_jaas_settings.conf"
#/ or just
#/ "/full/path/to/my_jaas_settings.conf"
# org.csstudio.security/jaas_config_file=platform:/plugin/org.csstudio.security/jaas.conf
#/ 
#/ Name of a JAAS login configuration to use.
#/ This must match the name of one of the entries
#/ in the jaas_config_file.
# org.csstudio.security/jaas_config_name=dummy
#/ 
#/ Option 2:
#/ Do not use a JAAS config file.
#/ Instead, provide what would the desired entry in the config file
#/ as an Eclipse preference.
#/ 
#/ If the preference "jaas_config" is defined, it will have
#/ precedence. "jaas_config_file" and "jaas_config_name" will
#/ be ignored!
#/ 
#/ Format:
#/ 	ModuleClass Flag option1=value1 option2=value2 ...; ModuleClass Flag ModuleOptions; ...
#/ ModuleClass, Flag and value options are in the same format as in auth.conf, but all on one line.
#/ Value strings must be quoted.
#/ 
#/ Examples:
#/ jaas_config=com.sun.jmx.remote.security.FileLoginModule required debug="true" passwordFile="/path/to/my_passwords.conf";
#/ jaas_config=com.sun.security.auth.module.LdapLoginModule required debug="true" useSSL="false" userProvider="ldap://localhost:389/ou=Users,dc=css-demo,dc=org" authIdentity="uid={USERNAME},ou=Users,dc=css-demo,dc=org";
# org.csstudio.security/jaas_config=
#/ 
#/ #
#/ # Authorization
#/ #
#/ 
#/ Select authorization provider
#/ 
#/ Standard implementations:
#/ FileBased, see org.csstudio.security.authorization.FileBasedAuthorizationProvider
#/ LDAPGroup, see org.csstudio.security.authorization.LDAPGroupAuthorizationProvider
#/ Script, see org.csstudio.security.authorization.ScriptAuthorizationProvider
#/ 
#/ Additional providers can be added via extension point,
#/ see org.csstudio.security.authorization.AuthorizationProvider
# org.csstudio.security/authorization_provider=FileBased
#/ 
#/ Path to FileBased authorization configuration file
# org.csstudio.security/authorization_file_name=platform:/plugin/org.csstudio.security/authorization.conf
#/ 
#/ Settings for authorization_provider=LDAPGroup:
#/ URL of LDAP server. May list several space-separated URLs.
# org.csstudio.security/ldap_group_url=ldap://localhost/dc=css-demo,dc=org
#/ Start of search for LDAPGroup-based authorization
# org.csstudio.security/ldap_group_base=ou=Groups
#/ 
#/ The LDAP search will combine the group of interest with the 'base' and URL path.
#/ 
#/ Example:
#/ ldap_group_url=ldap://localhost/dc=css-demo,dc=org
#/ ldap_group_base=ou=Groups
#/ 
#/ Authorization for which to determine members: alarm_config
#/ => Locate "cn=alarm_config,ou=Groups,dc=css-demo,dc=org"
#/ and every "memberUid" will then provide a user name
#/ who has the alarm_config authorization.
#/ 
#/ Path to command used by Script authorization
# org.csstudio.security/authorization_script_name=/usr/local/bin/id_auth
#/ 
#/ 
#/ #
#/ # Secure Preferences
#/ #
#/ 
#/ Where secure preferences are located.
#/ 
#/ "Default":
#/ Use the default location, which is typically
#/ the user's home directory.
#/ @see SecurePreferencesFactory#getDefault()
#/ 
#/ Advantage: It's the default
#/ Disadvantage: You won't always know where the preferences are.
#/ 
#/ "Instance":
#/ Use the Eclipse 'instance', i.e. the workspace.
#/ 
#/ Advantage: You know where it is, and each workspace
#/ will have its own settings.
#/ Disadvantage: Each workspace has different settings.
#/ 
#/ "Install":
#/ Use the Eclipse 'install' location, i.e. where the product is installed.
#/ 
#/ Advantage: You know where it is, and every workspace for that
#/ product will have the same settings. Good for a "global" setup.
#/ Disadvantage: Ordinary users cannot (should not) have write permissions.
# org.csstudio.security/secure_preference_location=Default

#<< org.csstudio.security/authorization_file_name=platform:/plugin/org.csstudio.security/authorization.conf
#<< org.csstudio.security/authorization_provider=FileBased
#<< org.csstudio.security/authorization_script_name=/usr/local/bin/id_auth
#<< org.csstudio.security/jaas_config=
#<< org.csstudio.security/jaas_config_file=platform:/plugin/org.csstudio.security/jaas.conf
#<< org.csstudio.security/jaas_config_name=dummy
#<< org.csstudio.security/ldap_group_base=ou=Groups
#<< org.csstudio.security/ldap_group_url=ldap://localhost/dc=css-demo,dc=org
#<< org.csstudio.security/secure_preference_location=Default

#/
## org.csstudio.simplepv 
#/
#/ Default PV Factory to use
# org.csstudio.simplepv/default_pvfactory=pvmanager

#<< org.csstudio.simplepv/default_pvfactory=pvmanager

#/
## org.csstudio.utility.pv 
#/
#/ Default PV type
# org.csstudio.utility.pv/default_type=epics

#<< org.csstudio.utility.pv/default_type=epics

#/
## org.csstudio.vtype.pv 
#/
#/ Default PV Type
# org.csstudio.vtype.pv/default_type=ca

#<< org.csstudio.vtype.pv/default_type=ca

#/
## Core plugins preferences
#/

#/
## Application plugins preferences
#/

#/
## Unused preferences
#/

#>>
org.eclipse.ui/SHOW_PROGRESS_ON_STARTUP=false
