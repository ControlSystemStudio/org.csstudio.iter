/** JAAS Configuration file example
 *
 *  This is the default JAAS configuration file.
 *
 *  To use a different file, copy this file, edit as needed,
 *  then define the Eclipse preference
 *
 *   org.csstudio.security/jaas_config_file=/path/to/your/file
 *
 * to specify the file, combined with the Eclipse preference
 *
 *   org.csstudio.security/jaas_config_name=Local_LDAP
 *
 * so select one of the login configurations specified in your file.
 */ 


/** The following two entries need to be present
 *  to support automatic login based on the current user.
 *  See LoginJob.forCurrentUser()
 */

/* Use the currently logged-in user on Linux and Mac OS X */
unix
{
    com.sun.security.auth.module.UnixLoginModule required
    /* debug="true" */;
};


/* Use the currently logged-in user on Windows */
windows
{
    com.sun.security.auth.module.NTLoginModule required
    /* debug="true" */;
};


/* Use plain-text password file.

 * The passwordFile as listed in here works for
 * plain JUnit tests.
 
 * In the real world, it has to be the full path
 * to the file, which should probably be located
 * in for example /usr/local/etc.
 * But then again in the real world you should not
 * use such a plain-text password file anyway...
 */
file
{
    com.sun.jmx.remote.security.FileLoginModule required
    debug="true"
    passwordFile="passwords.conf";
};


/* LDAP authentication.
 * Example of using LDAP on 'localhost' and some root DN.
 *
 * Refer to javadoc of com.sun.security.auth.module.JndiLoginModule
 * for full details.
 * The user URL must point to entries in the LDAP "inetOrgPerson" schema
 * with "uid" and "userPassword" attributes.
 * The provided user name must match a "uid",
 * and the password must match the "{crypt}..." version of "userPassword".
 */ 
Local_LDAP
{
    com.sun.security.auth.module.JndiLoginModule required
    debug="true"
    user.provider.url="ldap://localhost:389/ou=People,dc=test,dc=ics"
    group.provider.url="ldap://localhost:389/ou=People,dc=test,dc=ics";
};


/* Authentication as used by SNS UCAMS.
 * Performs an LDAP 'bind' with user name and password.
 */
SNS_LDAP
{
    com.sun.security.auth.module.LdapLoginModule required
    /* debug=true */
    userProvider="ldaps://skynet2.ornl.gov/ou=Users,dc=ornl,dc=gov"
    authIdentity="uid={USERNAME},ou=Users,dc=ornl,dc=gov";
};

/* Authentication as used by SNS UCAMS.
 * Performs an LDAP 'bind' with user name and password.
 */
FRIB_LDAP
{
    com.sun.security.auth.module.LdapLoginModule required
    debug=true
    userProvider="ldaps://intranet.nscl.msu.edu/ou=NSCL Users,dc=intranet,dc=nscl,dc=msu,dc=edu"
    authIdentity="{USERNAME}@intranet.nscl.msu.edu"
    userFilter="(sAMAccountName={USERNAME})";
};


/* Dummy log in:
 * Allows any name and password except "fail".
 * "fail" is used to test a failed log in.
 *
 * Also an example for adding a custom LoginModule:
 *
 * 1) Implement a LoginModule. See JAAS documentation.
 *    Assume it's called org.csstudio.security.xy.XYLoginModule
 * 2) In plugin.xml of the plugin that implements the JAAS LoginModule,
 *    register it via the Eclipse extension point:
 *  <extension point="org.eclipse.equinox.security.loginModule"
 *       id="XYLoginModule">
 *     <loginModule
 *           class="org.csstudio.security.xy.XYLoginModule"
 *           description="XY Login Mechanism">
 *     </loginModule>
 *  </extension>
 * 3) Use it via the Eclipse ExtensionLoginModule.
 *
 * Fundamentally, JAAS could directly use
 *  org.csstudio.security.xy.XYLoginModule
 * but under Eclipse/OSGi it would not have access
 * to the correct classloader.
 * The ExtensionLoginModule can locate login modules
 * that are registered via the extension point.
 */
dummy
{
    /* Get custom LoginModule via Eclipse */
    org.eclipse.equinox.security.auth.module.ExtensionLoginModule required
    extensionId=org.csstudio.security.DummyLoginModule
    /* Parameters for XYLoginModule */
    debug=true
    whatever.your.loginmodule.uses="value";
};
