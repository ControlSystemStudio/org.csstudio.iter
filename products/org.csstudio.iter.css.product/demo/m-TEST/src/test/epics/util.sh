#+======================================================================
# $HeadURL: https://svnpub.iter.org/codac/iter/codac/dev/units/m-codac-unit-api/trunk/src/main/resources/util.sh $
# $Id: util.sh 54863 2015-02-20 21:39:47Z zagara $
#
# Project       : CODAC Core System
#
# Description   : Test utilities
#
# Author        : This script was generated by CODAC development toolkit
#
# Copyright (c) : 2010-2018 ITER Organization,
#                 CS 90 046
#                 13067 St. Paul-lez-Durance Cedex
#                 France
#
# This file is part of ITER CODAC software.
# For the terms and conditions of redistribution or use of this software
# refer to the file ITER-LICENSE.TXT located in the top level directory
# of the distribution package.
#
#-======================================================================

#######################################################
# Prints an error.
#
# USAGE
#   error "Something wrong!" || return 1
#
# ARGUMENT
#  $1: Error message
#
# RETURN
#   Always returns 1.
#######################################################
function error() {
    RED='\e[1;31m'
    NC='\e[0m' # No Color
    echo -e "${RED}Error: $1${NC}" >&2
    return 1
}

#######################################################
# Tells if given value is a number.
#
# USAGE
#   is_numeric "$value" || echo "$value is not a number"
#
# ARGUMENT
#  $1: Value
#
# RETURN
#   Returns 0 if value is a number and 1 otherwise.
#######################################################
function is_numeric() {
    export value=$1
    perl -MScalar::Util -e 'Scalar::Util::looks_like_number($ENV{"value"}) or exit(1);'
    return $?
}

#######################################################
# Evaluates given PV using "caget".
#
# USAGE
#   value=$(epics_pv_value "pv")
#
# ARGUMENT
#  $1: PV name
#
# RETURN
#   Returns 0 if evaluation was successful and 1
#   otherwise. PV value is printed on standard output.
#######################################################
function epics_pv_value() {
    caget "$1" 2> /dev/null | sed -n "s/^$1\\s*//p"
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        error "PV '$1' cannot be evaluated!"
        return 1
    fi
}

#######################################################
# Obtain the value of the specified PV by using
# "caget" and check if the value is equal to the
# specified value.
#
# ARGUMENT
#  $1: PV name
#  $2: Expected value
#
# RETURN
#   If the obtained values is equal to the specified
#   value, this function returns 1, otherwise it
#   returns 0.
#######################################################
function epics_pv_eq() {
    val=$(epics_pv_value "$1") || return $?
    export val
    export exp=$2
    if is_numeric "$val" && is_numeric "$exp"; then
        perl -e 'exit($ENV{"val"} != $ENV{"exp"})'
    else
        [ "$val" == "$exp" ]
    fi
    if [ $? -eq 0 ]; then
        echo "PV value '$1=$val' equals '$exp'!"
    else
        error "PV value '$1=$val' not equals '$exp'!"
        return 1
    fi
}

#######################################################
# Obtain the value of the specified PV by using
# "caget" and check if the value is NOT equal to the
# specified value.
#
# ARGUMENT
#  $1: PV name
#  $2: Nonexpected value.
#
# RETURN
#   If the obtained values is NOT equal to the
#   specified value, this function returns 1,
#   otherwise it returns 0.
#######################################################
function epics_pv_not_eq() {
    val=$(epics_pv_value "$1") || return $?
    export val
    export exp=$2
    if is_numeric "$val" && is_numeric "$exp"; then
        perl -e 'exit($ENV{"val"} != $ENV{"exp"})'
    else
        [ "$val" == "$exp" ]
    fi
    if [ $? -eq 0 ]; then
        error "PV value '$1=$val' equals '$exp'!"
        return 1
    else
        echo "PV value '$1=$val' not equals '$exp'!"
    fi
}

#######################################################
# Obtain the value of the specified PV by using
# "caget" and check if the value is between two
# specified values. Requres numeric PV value and
# boundaries.
#
# ARGUMENT
#  $1: PV name
#  $2: Lower bound
#  $3: Upper bound
#
# RETURN
#   If the obtained values is between two specified
#   values, this function returns 1, otherwise it
#   returns 0.
#######################################################
function epics_pv_between() {
    val=$(epics_pv_value "$1") || return $?
    export val
    export min=$2
    export max=$3
    is_numeric "$val" || error "PV value '$1=$val' is not a number!" || return $?
    is_numeric "$min" || error "Lower boundary '$min' is not a number!" || return $?
    is_numeric "$max" || error "Upper boundary '$max' is not a number!" || return $?
    if perl -e 'exit(!($ENV{"min"} < $ENV{"val"} && $ENV{"val"} < $ENV{"max"}))'; then
        echo "PV value '$1=$val' is within range ($min, $max)."
    else
        error "PV value '$1=$val' is out of range ($min, $max)!"
        return 1
    fi
}

