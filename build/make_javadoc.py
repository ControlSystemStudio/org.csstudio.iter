'''
Create Javadoc for plugins

Note that this does not work!

Idea:
 Scan all 'core' plugins,
 create an 'ant' file for creating javadoc.
 
Problem 1:
 Many source files contain annotations, and javadoc crashes
 on unknown annotations,
 http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6442982
 Would have to add junit, ... anything that defines annotations
 to the classpath.
 
Problem 2:
 Javadoc can group packages in its overview.
 Would be nice to "group" the output by plugin.
 The code below tries that, but for now omits the corresponding
 <group ...> section from the ant file because packages
 may be in multiple plugins, which results in another ant error.

@author: Kay Kasemir
'''

# ---- CONFIGURE THIS ----------

plugin_dir = "../core/plugins"
classpath = "/Kram/Eclipse/3_7_2/rcp/eclipse/plugins/org.junit_4.8.2.v4_8_2_v20110321-1705/junit.jar"

# ------------------------------

from glob import glob
import sys
import os
import string





def getPlugins(plugin_dir):
    """Locate plugins
       @param plugin_dir: Directory to search for plugins
    """ 
    # Locate plugins via manifest
    plugin_src = glob(plugin_dir + "/*/META-INF/MANIFEST.MF")
    plugins = []
    for src in plugin_src:
        # Get plugin name by removing "/META..." and the path
        plugin = string.replace(string.replace(src, "/META-INF/MANIFEST.MF", ""), plugin_dir+"/", "")
        
        # Skip plugins that end in ".test"
        if plugin.endswith(".test") or plugin.endswith(".tests"):
            continue
        plugins.append(plugin)
    return plugins


def getPackages(plugin_dir, plugin):
    """Determine Java packages of a plugin
       @param plugin: Plugin name
       @return: List of packages in plugin's "src" dir 
    """
    packages = []
    path = os.path.join(plugin_dir, plugin, "src")
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.endswith(".java"):
                # Remove ../srv/, change path into package
                package = string.replace( string.replace(root, path + "/", ""), "/", ".")
                packages.append(package)
                break
    return packages



def createAntfile(plugin_dir, classpath, plugins):
    sys.stdout = open("javadoc.xml", "w")
    print """<?xml version="1.0"?>
<!-- Ant file for generating plugin javadoc
 
     Generated by make_javadoc.py
  -->
<project name="core.javadoct" default="all">

    <!-- Output directory -->
    <property name="out" value="javadoc" />

    <!-- Remove all that might have been created -->
    <target name="clean">
        <delete dir="${out}" />
    </target>

    <!-- Compile Java sources -->
    <target name="javadoc">
        <javadoc"""
    print "            classpath=\"%s\"" % classpath
    print """            destdir="${out}"
            author="true"
            version="true"
            use="true"
            windowtitle="CSS Core API"
            useexternalfile="yes">

            <doctitle><![CDATA[<h1>CSS Core API</h1>]]></doctitle>"""
            
    print "            <fileset dir=\"%s\">" % plugin_dir
    for plugin in plugins:
        print "              <include name=\"%s/src/**/*.java\"/>" % plugin
    print """              <exclude name="**/*.properties"/>
            </fileset>"""

    for plugin in plugins:
        packages = getPackages(plugin_dir, plugin)
        pack_list = string.join(packages, ":")
        # TODO Not generating the <group ...> configuration ...
        # print "            <group title=\"Plugin %s\" packages=\"%s\"/>" % (plugin, pack_list)
    print """
        </javadoc>
    </target>

    <!-- Run the whole chain -->
    <target name="all" depends="javadoc">
        <echo>=== Completed ${ant.project.name} ===</echo>
    </target>
</project>
"""
    sys.stdout.flush()
    sys.stdout.close()
    sys.stdout = sys.__stdout__




plugins = getPlugins(plugin_dir)
createAntfile(plugin_dir, classpath, plugins)
print "Generated javadoc.xml, execute like this:"
print "ant -f javadoc.xml"


