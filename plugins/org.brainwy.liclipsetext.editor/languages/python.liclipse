inherit: BaseDefinitions # Signal that we want to start from base.liclipse

scope_to_color_name: {
 doubleQuotedMultiLineString: string,
 singleQuotedMultiLineString: string,
 doubleQuotedString: string,
 singleQuotedString: string,
 default: foreground,
 decorator: annotation,
 builtins: annotation,
}
scope_definition_rules:
  #Comments (inherited from base.liclipse)
  - 'PythonCommentRule'

  #Multi Line Strings (inherited from base.liclipse)
  #It's important that the multi-line comes before the single-line (otherwise the single line would always match first
  #and would never allow the multi-line to work).
  - 'SingleQuotedTriMultiLineRule'
  - 'DoubleQuotedTriMultiLineRule'

  # Single Line Strings (inherited from base.liclipse)
  - 'SingleQuotedSingleLineRule'
  - 'DoubleQuotedSingleLineRule'

scope:
  default:
    bracket: ['(', ')', '[', ']', '{', '}']

    operator: [<, '>', '=', +, '-', /, '*', '!', '&', '|', '%', '~', ^, ',']

    #builtins (color name: localVariable)
    localVariable: [abs, divmod, input, open, staticmethod, all, enumerate, int, ord, str,
        any, eval, isinstance, pow, sum, basestring, execfile, issubclass, print, super,
        bin, file, iter, property, tuple, bool, filter, len, range, type,
        bytearray, float, list, raw_input, unichr, callable, format, locals, reduce, unicode,
        chr, frozenset, long, reload, vars, classmethod, getattr, map, repr, xrange,
        cmp, globals, max, reversed, zip, compile, hasattr, memoryview, round, __import__,
        complex, hash, min, set, apply, delattr, help, next, setattr, buffer,
        dict, hex, object, slice, coerce, dir, id, oct, sorted, intern
    ]

    keyword: [and, as, assert, break, class, continue, def, del, elif, else, except, exec, finally,
      for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, print,
      raise, return, self, try, while, with, yield, 'False', None, 'True']

    #Note: we want to define def and class above regardless of using them again later on.
    #In practice, we'll always match sub-rules before the others, so, if we have a match,
    #it'll work anyways.
    sub_rules: [
      # Decorator
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: decorator, sequence: '@'},
        { type: AnyWordRule, scope: decorator }]
      },
      # Class
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'class'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: class }]
      },
      # Method
      {type: CompositeRule, sub_rules: [
        { type: SequenceRule, scope: keyword, sequence: 'def'},
        { type: OneOrMoreSpacesRule, scope: default},
        { type: AnyWordRule, scope: method }]
      },
      { type: NumberRule, scope: number},

    ]

file_extensions: [py, pyw]
filename: [SConstruct, SConscript]
shebang: "^#!.*\\bpython\\b"
name: Python


outline: #Icons: LiClipseParsedItem.getImage(): class, method, comment, attribute (based on 'define')
  - {type: Scope, scope: [default, class], define: class} #scope is a list to identify sub-rule
  - {type: Scope, scope: [default, method], define: method}
  - {type: Regexp, scope: [singleLineComment], regexp: '#---.*', define: comment, group: 0}

indent: {
  type: spaces, #Spaces are used for indenting in Python
  outline_scopes: [class, method], #Scopes are created where the outline defines a class or method.
  spaces_for_tabs: true, #Python folks recommend it.
  tab_width: 4, #Note: optional (default is based on preferences for text editors in the eclipse preferences)
}

auto_edit:
  - {after: ':', trigger: '\n', action: indent, scope: default} #in a new line, indent after ':'
  - {before: ':', trigger: ':', action: skip, scope: default} #skip ':' if already there
  - {auto_close_scopes: [doubleQuotedString, singleQuotedString, singleQuotedMultiLineString, doubleQuotedMultiLineString], scope: default} #To work, the scopes must be: SingleLineRule(sequence used for start/end) or MultiLineRule.
  - {auto_close_parens: ['(', '[', '{'], scope: default} #Will close the parens if it's not properly balanced
  - {auto_skip_parens: [')', ']', '}'], scope: default} #Will skip the close parens if it's properly balanced

comment: {type: singleLine, sequence: '#'}

# The launch is composed of: ${executable} ${vm_args} ${file_to_run_from_selection} ${arguments}
# ${file_to_run_from_selection} is usually filled based on the current selection (F9 on active editor)
# ${arguments} must be filled later on in the run configuration (run > run configurations)
launch: {
  command: python, #Note: 'python' must be in the PATH for the launch to work
  vm_args: '-u',
  environment: {
    'PYTHONUNBUFFERED': '1'
  },
  hyperlink: {
    regexp: '.*(File) \"([^\"]*)\", line (\d*).*',
    start: 1, #i.e.: start the hyperlink on 'File' (group 1 of the hyperlink -- group 0 is "all").
    filename: 2, #i.e.: group 2 of the regexp has the filename
    line: 3, #i.e.: group 1 of the regexp has the line in the file where we should go to
  }
}

templates: #Note: pressing ctrl+space twice will show only the templates
- name: 'init'
  description: "Create __init__"
  pattern: def __init__(self):${cursor}

